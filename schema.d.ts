/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/allowence/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all objects
         * @description Returns a paginated list of all available objects. Can be filtered using query parameters.
         */
        get: operations["allowence_list"];
        put?: never;
        /**
         * Create new object
         * @description Creates a new object with the provided data. Returns the created object.
         */
        post: operations["allowence_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/allowence/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get single object
         * @description Retrieves a specific object by its unique identifier (ID).
         */
        get: operations["allowence_retrieve"];
        /**
         * Update object
         * @description Fully updates an existing object. All fields must be provided.
         */
        put: operations["allowence_update"];
        post?: never;
        /**
         * Delete object
         * @description Permanently removes the specified object from the database.
         */
        delete: operations["allowence_destroy"];
        options?: never;
        head?: never;
        /**
         * Partial update object
         * @description Partially updates an existing object. Only specified fields will be modified.
         */
        patch: operations["allowence_partial_update"];
        trace?: never;
    };
    "/api/buildings/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all objects
         * @description Returns a paginated list of all available objects. Can be filtered using query parameters.
         */
        get: operations["buildings_list"];
        put?: never;
        /**
         * Create new object
         * @description Creates a new object with the provided data. Returns the created object.
         */
        post: operations["buildings_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/buildings/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get single object
         * @description Retrieves a specific object by its unique identifier (ID).
         */
        get: operations["buildings_retrieve"];
        /**
         * Update object
         * @description Fully updates an existing object. All fields must be provided.
         */
        put: operations["buildings_update"];
        post?: never;
        /**
         * Delete object
         * @description Permanently removes the specified object from the database.
         */
        delete: operations["buildings_destroy"];
        options?: never;
        head?: never;
        /**
         * Partial update object
         * @description Partially updates an existing object. Only specified fields will be modified.
         */
        patch: operations["buildings_partial_update"];
        trace?: never;
    };
    "/api/equipment/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all objects
         * @description Returns a paginated list of all available objects. Can be filtered using query parameters.
         */
        get: operations["equipment_list"];
        put?: never;
        /**
         * Create new object
         * @description Creates a new object with the provided data. Returns the created object.
         */
        post: operations["equipment_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/equipment/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get single object
         * @description Retrieves a specific object by its unique identifier (ID).
         */
        get: operations["equipment_retrieve"];
        /**
         * Update object
         * @description Fully updates an existing object. All fields must be provided.
         */
        put: operations["equipment_update"];
        post?: never;
        /**
         * Delete object
         * @description Permanently removes the specified object from the database.
         */
        delete: operations["equipment_destroy"];
        options?: never;
        head?: never;
        /**
         * Partial update object
         * @description Partially updates an existing object. Only specified fields will be modified.
         */
        patch: operations["equipment_partial_update"];
        trace?: never;
    };
    "/api/import/lsData/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List contents of a directory in the DATA directory
         * @description Lists all files and directories in the specified path under the DATA directory.
         */
        get: operations["import_lsData_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/imports_exports/fei/import/db/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Import data from live AIS DB
         * @description Import data by connecting to the live FEI database.
         */
        post: operations["imports_exports_fei_import_db_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/imports_exports/fei/import/dir/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Import FEI dataset from DATA directory
         * @description Import FEI exports from dir specified.
         */
        post: operations["imports_exports_fei_import_dir_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/imports_exports/fei/import/zip/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Import DB data from ZIP of CSVs
         * @description Import data from a ZIP file. Optionally persist it in the DATA directory.
         */
        post: operations["imports_exports_fei_import_zip_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/imports_exports/fei/terms/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description ViewSet for retrieving and importing AIS terms.
         *     GET operations for terms data, POST operations for imports. */
        get: operations["imports_exports_fei_terms_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/imports_exports/fei/terms/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description ViewSet for retrieving and importing AIS terms.
         *     GET operations for terms data, POST operations for imports. */
        get: operations["imports_exports_fei_terms_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/imports_exports/fei/terms/import/dir/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Import terms from directory
         * @description Import data from a directory in the DATA folder.
         */
        post: operations["imports_exports_fei_terms_import_dir_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/imports_exports/fei/terms/import/zip/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Import terms from ZIP file
         * @description Import data from a ZIP file. Optionally persist it in the DATA directory.
         */
        post: operations["imports_exports_fei_terms_import_zip_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/room-equipment/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all objects
         * @description Returns a paginated list of all available objects. Can be filtered using query parameters.
         */
        get: operations["room_equipment_list"];
        put?: never;
        /**
         * Create new object
         * @description Creates a new object with the provided data. Returns the created object.
         */
        post: operations["room_equipment_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/room-equipment/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get single object
         * @description Retrieves a specific object by its unique identifier (ID).
         */
        get: operations["room_equipment_retrieve"];
        /**
         * Update object
         * @description Fully updates an existing object. All fields must be provided.
         */
        put: operations["room_equipment_update"];
        post?: never;
        /**
         * Delete object
         * @description Permanently removes the specified object from the database.
         */
        delete: operations["room_equipment_destroy"];
        options?: never;
        head?: never;
        /**
         * Partial update object
         * @description Partially updates an existing object. Only specified fields will be modified.
         */
        patch: operations["room_equipment_partial_update"];
        trace?: never;
    };
    "/api/room-groups/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all objects
         * @description Returns a paginated list of all available objects. Can be filtered using query parameters.
         */
        get: operations["room_groups_list"];
        put?: never;
        /**
         * Create new object
         * @description Creates a new object with the provided data. Returns the created object.
         */
        post: operations["room_groups_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/room-groups/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get single object
         * @description Retrieves a specific object by its unique identifier (ID).
         */
        get: operations["room_groups_retrieve"];
        /**
         * Update object
         * @description Fully updates an existing object. All fields must be provided.
         */
        put: operations["room_groups_update"];
        post?: never;
        /**
         * Delete object
         * @description Permanently removes the specified object from the database.
         */
        delete: operations["room_groups_destroy"];
        options?: never;
        head?: never;
        /**
         * Partial update object
         * @description Partially updates an existing object. Only specified fields will be modified.
         */
        patch: operations["room_groups_partial_update"];
        trace?: never;
    };
    "/api/room-groups/list_groups/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Returns all unique room group names with counts of rooms in each group */
        get: operations["room_groups_list_groups_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rooms/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all objects
         * @description Returns a paginated list of all available objects. Can be filtered using query parameters.
         */
        get: operations["rooms_list"];
        put?: never;
        /**
         * Create new object
         * @description Creates a new object with the provided data. Returns the created object.
         */
        post: operations["rooms_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/rooms/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get single object
         * @description Retrieves a specific object by its unique identifier (ID).
         */
        get: operations["rooms_retrieve"];
        /**
         * Update object
         * @description Fully updates an existing object. All fields must be provided.
         */
        put: operations["rooms_update"];
        post?: never;
        /**
         * Delete object
         * @description Permanently removes the specified object from the database.
         */
        delete: operations["rooms_destroy"];
        options?: never;
        head?: never;
        /**
         * Partial update object
         * @description Partially updates an existing object. Only specified fields will be modified.
         */
        patch: operations["rooms_partial_update"];
        trace?: never;
    };
    "/api/schemas/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all objects
         * @description Returns a paginated list of all available objects. Can be filtered using query parameters.
         */
        get: operations["schemas_list"];
        put?: never;
        /**
         * Create new object
         * @description Creates a new object with the provided data. Returns the created object.
         */
        post: operations["schemas_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/schemas/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get single object
         * @description Retrieves a specific object by its unique identifier (ID).
         */
        get: operations["schemas_retrieve"];
        /**
         * Update object
         * @description Fully updates an existing object. All fields must be provided.
         */
        put: operations["schemas_update"];
        post?: never;
        /**
         * Delete object
         * @description Permanently removes the specified object from the database.
         */
        delete: operations["schemas_destroy"];
        options?: never;
        head?: never;
        /**
         * Partial update object
         * @description Partially updates an existing object. Only specified fields will be modified.
         */
        patch: operations["schemas_partial_update"];
        trace?: never;
    };
    "/api/schemas/{id}/activate/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Explicit endpoint to activate a schema */
        post: operations["schemas_activate_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/subject-groups/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all objects
         * @description Returns a paginated list of all available objects. Can be filtered using query parameters.
         */
        get: operations["subject_groups_list"];
        put?: never;
        /**
         * Create new object
         * @description Creates a new object with the provided data. Returns the created object.
         */
        post: operations["subject_groups_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/subject-groups/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get single object
         * @description Retrieves a specific object by its unique identifier (ID).
         */
        get: operations["subject_groups_retrieve"];
        /**
         * Update object
         * @description Fully updates an existing object. All fields must be provided.
         */
        put: operations["subject_groups_update"];
        post?: never;
        /**
         * Delete object
         * @description Permanently removes the specified object from the database.
         */
        delete: operations["subject_groups_destroy"];
        options?: never;
        head?: never;
        /**
         * Partial update object
         * @description Partially updates an existing object. Only specified fields will be modified.
         */
        patch: operations["subject_groups_partial_update"];
        trace?: never;
    };
    "/api/subject-groups/groups/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get list of unique subject groups with their counts */
        get: operations["subject_groups_groups_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/subject-user-collisions/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description List subject user collisions */
        get: operations["subject_user_collisions_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/subject-user-roles/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all objects
         * @description Returns a paginated list of all available objects. Can be filtered using query parameters.
         */
        get: operations["subject_user_roles_list"];
        put?: never;
        /**
         * Create new object
         * @description Creates a new object with the provided data. Returns the created object.
         */
        post: operations["subject_user_roles_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/subject-user-roles/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get single object
         * @description Retrieves a specific object by its unique identifier (ID).
         */
        get: operations["subject_user_roles_retrieve"];
        /**
         * Update object
         * @description Fully updates an existing object. All fields must be provided.
         */
        put: operations["subject_user_roles_update"];
        post?: never;
        /**
         * Delete object
         * @description Permanently removes the specified object from the database.
         */
        delete: operations["subject_user_roles_destroy"];
        options?: never;
        head?: never;
        /**
         * Partial update object
         * @description Partially updates an existing object. Only specified fields will be modified.
         */
        patch: operations["subject_user_roles_partial_update"];
        trace?: never;
    };
    "/api/subjects/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all objects
         * @description Returns a paginated list of all available objects. Can be filtered using query parameters.
         */
        get: operations["subjects_list"];
        put?: never;
        /**
         * Create new object
         * @description Creates a new object with the provided data. Returns the created object.
         */
        post: operations["subjects_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/subjects/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get single object
         * @description Retrieves a specific object by its unique identifier (ID).
         */
        get: operations["subjects_retrieve"];
        /**
         * Update object
         * @description Fully updates an existing object. All fields must be provided.
         */
        put: operations["subjects_update"];
        post?: never;
        /**
         * Delete object
         * @description Permanently removes the specified object from the database.
         */
        delete: operations["subjects_destroy"];
        options?: never;
        head?: never;
        /**
         * Partial update object
         * @description Partially updates an existing object. Only specified fields will be modified.
         */
        patch: operations["subjects_partial_update"];
        trace?: never;
    };
    "/api/subjects/get_student_count/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve the count of students for a subject
         * @description Returns the count of students for a specific subject or for all subjects if no subject_id is provided. Invalid subject_id results in ok with count 0.
         */
        get: operations["subjects_get_student_count_retrieve"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/token/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Takes a set of user credentials and returns an access and refresh JSON web
         *     token pair to prove the authentication of those credentials. */
        post: operations["token_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/token/refresh/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Takes a refresh type JSON web token and returns an access type JSON web
         *     token if the refresh token is valid. */
        post: operations["token_refresh_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/tt/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all objects
         * @description Returns a paginated list of all available objects. Can be filtered using query parameters.
         */
        get: operations["tt_list"];
        put?: never;
        /**
         * Create new object
         * @description Creates a new object with the provided data. Returns the created object.
         */
        post: operations["tt_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/tt/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get single object
         * @description Retrieves a specific object by its unique identifier (ID).
         */
        get: operations["tt_retrieve"];
        /**
         * Update object
         * @description Fully updates an existing object. All fields must be provided.
         */
        put: operations["tt_update"];
        post?: never;
        /**
         * Delete object
         * @description Permanently removes the specified object from the database.
         */
        delete: operations["tt_destroy"];
        options?: never;
        head?: never;
        /**
         * Partial update object
         * @description Partially updates an existing object. Only specified fields will be modified.
         */
        patch: operations["tt_partial_update"];
        trace?: never;
    };
    "/api/ttecontroller/generate-tte-events/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Generate TTE events
         * @description Generate TTE events for subjectgroup groups.e.g. subjectgroup=B-API, TT-id=1, it generates events for B-API subjectgroup into TT B-API-1_testX.If nominal_semester is not specified, all events are generated.
         */
        get: operations["ttecontroller_generate_tte_events_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/ttetype/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all objects
         * @description Returns a paginated list of all available objects. Can be filtered using query parameters.
         */
        get: operations["ttetype_list"];
        put?: never;
        /**
         * Create new object
         * @description Creates a new object with the provided data. Returns the created object.
         */
        post: operations["ttetype_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/ttetype/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get single object
         * @description Retrieves a specific object by its unique identifier (ID).
         */
        get: operations["ttetype_retrieve"];
        /**
         * Update object
         * @description Fully updates an existing object. All fields must be provided.
         */
        put: operations["ttetype_update"];
        post?: never;
        /**
         * Delete object
         * @description Permanently removes the specified object from the database.
         */
        delete: operations["ttetype_destroy"];
        options?: never;
        head?: never;
        /**
         * Partial update object
         * @description Partially updates an existing object. Only specified fields will be modified.
         */
        patch: operations["ttetype_partial_update"];
        trace?: never;
    };
    "/api/ttevent/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all objects
         * @description Returns a paginated list of all available objects. Can be filtered using query parameters.
         */
        get: operations["ttevent_list"];
        put?: never;
        /**
         * Create new object
         * @description Creates a new object with the provided data. Returns the created object.
         */
        post: operations["ttevent_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/ttevent/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get single object
         * @description Retrieves a specific object by its unique identifier (ID).
         */
        get: operations["ttevent_retrieve"];
        /**
         * Update object
         * @description Fully updates an existing object. All fields must be provided.
         */
        put: operations["ttevent_update"];
        post?: never;
        /**
         * Delete object
         * @description Permanently removes the specified object from the database.
         */
        delete: operations["ttevent_destroy"];
        options?: never;
        head?: never;
        /**
         * Partial update object
         * @description Partially updates an existing object. Only specified fields will be modified.
         */
        patch: operations["ttevent_partial_update"];
        trace?: never;
    };
    "/api/ttgroup/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all objects
         * @description Returns a paginated list of all available objects. Can be filtered using query parameters.
         */
        get: operations["ttgroup_list"];
        put?: never;
        /**
         * Create new object
         * @description Creates a new object with the provided data. Returns the created object.
         */
        post: operations["ttgroup_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/ttgroup/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get single object
         * @description Retrieves a specific object by its unique identifier (ID).
         */
        get: operations["ttgroup_retrieve"];
        /**
         * Update object
         * @description Fully updates an existing object. All fields must be provided.
         */
        put: operations["ttgroup_update"];
        post?: never;
        /**
         * Delete object
         * @description Permanently removes the specified object from the database.
         */
        delete: operations["ttgroup_destroy"];
        options?: never;
        head?: never;
        /**
         * Partial update object
         * @description Partially updates an existing object. Only specified fields will be modified.
         */
        patch: operations["ttgroup_partial_update"];
        trace?: never;
    };
    "/api/ttgroup/groups/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get list of unique tt groups with their counts */
        get: operations["ttgroup_groups_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List all objects
         * @description Returns a paginated list of all available objects. Can be filtered using query parameters.
         */
        get: operations["users_list"];
        put?: never;
        /**
         * Create new object
         * @description Creates a new object with the provided data. Returns the created object.
         */
        post: operations["users_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/{id}/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get single object
         * @description Retrieves a specific object by its unique identifier (ID).
         */
        get: operations["users_retrieve"];
        /**
         * Update object
         * @description Fully updates an existing object. All fields must be provided.
         */
        put: operations["users_update"];
        post?: never;
        /**
         * Delete object
         * @description Permanently removes the specified object from the database.
         */
        delete: operations["users_destroy"];
        options?: never;
        head?: never;
        /**
         * Partial update object
         * @description Partially updates an existing object. Only specified fields will be modified.
         */
        patch: operations["users_partial_update"];
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** @description Serializer for AIS terms */
        AISObdobie: {
            readonly id?: number;
            /**
             * @description * `ZS` - Zimny
             *     * `LS` - Letny
             * @enum {string}
             */
            semester: "ZS" | "LS";
            year_start: number;
            phd?: boolean;
            department: string;
            prev?: number | null;
            next?: number | null;
            /** Format: date-time */
            start_date: string;
            /** Format: date-time */
            end_date: string;
        };
        /** @description Base serializer that automatically handles nested serialization with caching */
        Allowance: {
            readonly id?: number;
            tta: number;
            amount?: number;
        };
        /** @description Base serializer that automatically handles nested serialization with caching */
        AllowanceRequest: {
            tta: number;
            amount?: number;
        };
        /** @description Base serializer that automatically handles nested serialization with caching */
        Building: {
            readonly id?: number;
            name: string;
            abbrev: string;
        };
        /** @description Base serializer that automatically handles nested serialization with caching */
        BuildingRequest: {
            name: string;
            abbrev: string;
        };
        CrossSubjectCollision: {
            subject_a: number | null;
            subject_b: number | null;
            collision_count: number;
            subject_a_code?: string | null;
            subject_b_code?: string | null;
        };
        /** @description Base serializer that automatically handles nested serialization with caching */
        Equipment: {
            readonly id?: number;
            name: string;
        };
        /** @description Base serializer that automatically handles nested serialization with caching */
        EquipmentRequest: {
            name: string;
        };
        Err_serializer: {
            code: number;
            message: string;
            /**
             * Format: date-time
             * @default 2025-04-17T19:51:14.588755
             */
            timestamp: string;
        };
        Ok_serializer: {
            code: number;
            message: string;
            /**
             * Format: date-time
             * @default 2025-04-17T19:51:14.588833
             */
            timestamp: string;
        };
        Ok_serializerRequest: {
            code: number;
            message: string;
            /**
             * Format: date-time
             * @default 2025-04-17T19:51:14.588833
             */
            timestamp: string;
        };
        PaginatedAISObdobieList: {
            /** @example 123 */
            count: number;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?offset=400&limit=100
             */
            next?: string | null;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?offset=200&limit=100
             */
            previous?: string | null;
            results: components["schemas"]["AISObdobie"][];
        };
        PaginatedAllowanceList: {
            /** @example 123 */
            count: number;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?offset=400&limit=100
             */
            next?: string | null;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?offset=200&limit=100
             */
            previous?: string | null;
            results: components["schemas"]["Allowance"][];
        };
        PaginatedBuildingList: {
            /** @example 123 */
            count: number;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?offset=400&limit=100
             */
            next?: string | null;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?offset=200&limit=100
             */
            previous?: string | null;
            results: components["schemas"]["Building"][];
        };
        PaginatedCrossSubjectCollisionList: {
            /** @example 123 */
            count: number;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?offset=400&limit=100
             */
            next?: string | null;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?offset=200&limit=100
             */
            previous?: string | null;
            results: components["schemas"]["CrossSubjectCollision"][];
        };
        PaginatedEquipmentList: {
            /** @example 123 */
            count: number;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?offset=400&limit=100
             */
            next?: string | null;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?offset=200&limit=100
             */
            previous?: string | null;
            results: components["schemas"]["Equipment"][];
        };
        PaginatedRoomEquipmentList: {
            /** @example 123 */
            count: number;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?offset=400&limit=100
             */
            next?: string | null;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?offset=200&limit=100
             */
            previous?: string | null;
            results: components["schemas"]["RoomEquipment"][];
        };
        PaginatedRoomGroupList: {
            /** @example 123 */
            count: number;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?offset=400&limit=100
             */
            next?: string | null;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?offset=200&limit=100
             */
            previous?: string | null;
            results: components["schemas"]["RoomGroup"][];
        };
        PaginatedRoomGroupNameCountList: {
            /** @example 123 */
            count: number;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?offset=400&limit=100
             */
            next?: string | null;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?offset=200&limit=100
             */
            previous?: string | null;
            results: components["schemas"]["RoomGroupNameCount"][];
        };
        PaginatedRoomList: {
            /** @example 123 */
            count: number;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?offset=400&limit=100
             */
            next?: string | null;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?offset=200&limit=100
             */
            previous?: string | null;
            results: components["schemas"]["Room"][];
        };
        PaginatedSubjectGroupCountsList: {
            /** @example 123 */
            count: number;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?offset=400&limit=100
             */
            next?: string | null;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?offset=200&limit=100
             */
            previous?: string | null;
            results: components["schemas"]["SubjectGroupCounts"][];
        };
        PaginatedSubjectGroupList: {
            /** @example 123 */
            count: number;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?offset=400&limit=100
             */
            next?: string | null;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?offset=200&limit=100
             */
            previous?: string | null;
            results: components["schemas"]["SubjectGroup"][];
        };
        PaginatedSubjectList: {
            /** @example 123 */
            count: number;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?offset=400&limit=100
             */
            next?: string | null;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?offset=200&limit=100
             */
            previous?: string | null;
            results: components["schemas"]["Subject"][];
        };
        PaginatedSubjectUserRoleList: {
            /** @example 123 */
            count: number;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?offset=400&limit=100
             */
            next?: string | null;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?offset=200&limit=100
             */
            previous?: string | null;
            results: components["schemas"]["SubjectUserRole"][];
        };
        PaginatedTTEventList: {
            /** @example 123 */
            count: number;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?offset=400&limit=100
             */
            next?: string | null;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?offset=200&limit=100
             */
            previous?: string | null;
            results: components["schemas"]["TTEvent"][];
        };
        PaginatedTTEventTypeList: {
            /** @example 123 */
            count: number;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?offset=400&limit=100
             */
            next?: string | null;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?offset=200&limit=100
             */
            previous?: string | null;
            results: components["schemas"]["TTEventType"][];
        };
        PaginatedTTGroupCountsList: {
            /** @example 123 */
            count: number;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?offset=400&limit=100
             */
            next?: string | null;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?offset=200&limit=100
             */
            previous?: string | null;
            results: components["schemas"]["TTGroupCounts"][];
        };
        PaginatedTTGroupList: {
            /** @example 123 */
            count: number;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?offset=400&limit=100
             */
            next?: string | null;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?offset=200&limit=100
             */
            previous?: string | null;
            results: components["schemas"]["TTGroup"][];
        };
        PaginatedTTList: {
            /** @example 123 */
            count: number;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?offset=400&limit=100
             */
            next?: string | null;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?offset=200&limit=100
             */
            previous?: string | null;
            results: components["schemas"]["TT"][];
        };
        PaginatedUserList: {
            /** @example 123 */
            count: number;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?offset=400&limit=100
             */
            next?: string | null;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?offset=200&limit=100
             */
            previous?: string | null;
            results: components["schemas"]["User"][];
        };
        PaginatedschemaList: {
            /** @example 123 */
            count: number;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?offset=400&limit=100
             */
            next?: string | null;
            /**
             * Format: uri
             * @example http://api.example.org/accounts/?offset=200&limit=100
             */
            previous?: string | null;
            results: components["schemas"]["schema"][];
        };
        /** @description Base serializer that automatically handles nested serialization with caching */
        PatchedAllowanceRequest: {
            tta?: number;
            amount?: number;
        };
        /** @description Base serializer that automatically handles nested serialization with caching */
        PatchedBuildingRequest: {
            name?: string;
            abbrev?: string;
        };
        /** @description Base serializer that automatically handles nested serialization with caching */
        PatchedEquipmentRequest: {
            name?: string;
        };
        /** @description Base serializer that automatically handles nested serialization with caching */
        PatchedRoomEquipmentRequest: {
            room?: number;
            equipment?: number;
            count?: number;
        };
        /** @description Base serializer that automatically handles nested serialization with caching */
        PatchedRoomGroupRequest: {
            name?: string;
            room?: number;
            owner?: number | null;
        };
        PatchedRoomRequest: {
            name?: string;
            capacity?: number;
            building?: number | null;
        };
        /** @description Base serializer that automatically handles nested serialization with caching */
        PatchedSubjectGroupRequest: {
            subject?: number;
            name?: string;
        };
        /** @description Base serializer that automatically handles nested serialization with caching */
        PatchedSubjectRequest: {
            name?: string;
            code?: string;
            nominal_semester?: number | null;
            building?: number | null;
        };
        /** @description Base serializer that automatically handles nested serialization with caching */
        PatchedSubjectUserRoleRequest: {
            user?: number;
            subject?: number;
            role?: number;
        };
        /** @description Base serializer that automatically handles nested serialization with caching */
        PatchedTTEventRequest: {
            tta?: number;
            day_of_week?: number | null;
            /** Format: int64 */
            weeks_bitmask?: number | null;
            start_time?: number | null;
            duration?: number | null;
            room?: number | null;
        };
        /** @description Base serializer that automatically handles nested serialization with caching */
        PatchedTTEventTypeRequest: {
            name?: string;
        };
        /** @description Base serializer that automatically handles nested serialization with caching */
        PatchedTTGroupRequest: {
            name?: string;
            description?: string | null;
            timetables?: number[];
            owner?: number;
        };
        /** @description Base serializer that automatically handles nested serialization with caching */
        PatchedTTRequest: {
            name?: string;
            description?: string | null;
            owner?: number;
            /**
             * @description * `PUBLISHED` - Published
             *     * `HIDDEN` - Hidden
             *     * `WIP` - Work In Progress
             * @enum {string}
             */
            status?: "PUBLISHED" | "HIDDEN" | "WIP";
        };
        /** @description Base serializer that automatically handles nested serialization with caching */
        PatchedUserRequest: {
            username?: string;
            full_name?: string | null;
            /** Format: date-time */
            last_logout?: string | null;
        };
        PatchedschemaRequest: {
            human_name?: string;
            /** Format: date */
            start_date?: string | null;
            /** Format: date */
            end_date?: string | null;
            is_active?: boolean;
        };
        Room: {
            readonly id?: number;
            name: string;
            capacity: number;
            building: number | null;
        };
        /** @description Base serializer that automatically handles nested serialization with caching */
        RoomEquipment: {
            readonly id?: number;
            room: number;
            equipment: number;
            count: number;
        };
        /** @description Base serializer that automatically handles nested serialization with caching */
        RoomEquipmentRequest: {
            room: number;
            equipment: number;
            count: number;
        };
        /** @description Base serializer that automatically handles nested serialization with caching */
        RoomGroup: {
            readonly id?: number;
            name: string;
            room: number;
            owner?: number | null;
        };
        RoomGroupNameCount: {
            name: string;
            count: number;
        };
        /** @description Base serializer that automatically handles nested serialization with caching */
        RoomGroupRequest: {
            name: string;
            room: number;
            owner?: number | null;
        };
        RoomRequest: {
            name: string;
            capacity: number;
            building: number | null;
        };
        /** @description Base serializer that automatically handles nested serialization with caching */
        Subject: {
            readonly id?: number;
            name: string;
            code: string;
            nominal_semester: number | null;
            building?: number | null;
        };
        /** @description Base serializer that automatically handles nested serialization with caching */
        SubjectGroup: {
            readonly id?: number;
            subject: number;
            name: string;
        };
        /** @description Serializer for subject groups */
        SubjectGroupCounts: {
            /** @description Name of the subject group */
            name: string;
            /** @description Number of subjects in this group */
            count: number;
        };
        /** @description Base serializer that automatically handles nested serialization with caching */
        SubjectGroupRequest: {
            subject: number;
            name: string;
        };
        /** @description Base serializer that automatically handles nested serialization with caching */
        SubjectRequest: {
            name: string;
            code: string;
            nominal_semester: number | null;
            building?: number | null;
        };
        /** @description Base serializer that automatically handles nested serialization with caching */
        SubjectUserRole: {
            user: number;
            subject: number;
            role: number;
        };
        /** @description Base serializer that automatically handles nested serialization with caching */
        SubjectUserRoleRequest: {
            user: number;
            subject: number;
            role: number;
        };
        /** @description Base serializer that automatically handles nested serialization with caching */
        TT: {
            readonly id?: number;
            name: string;
            description?: string | null;
            owner: number;
            /**
             * @description * `PUBLISHED` - Published
             *     * `HIDDEN` - Hidden
             *     * `WIP` - Work In Progress
             * @enum {string}
             */
            status?: "PUBLISHED" | "HIDDEN" | "WIP";
            /** Format: date-time */
            readonly created_at?: string;
            /** Format: date-time */
            readonly updated_at?: string;
        };
        /** @description Base serializer that automatically handles nested serialization with caching */
        TTEvent: {
            readonly id?: number;
            tta: number;
            day_of_week?: number | null;
            /** Format: int64 */
            weeks_bitmask?: number | null;
            start_time?: number | null;
            duration?: number | null;
            room?: number | null;
        };
        /** @description Base serializer that automatically handles nested serialization with caching */
        TTEventRequest: {
            tta: number;
            day_of_week?: number | null;
            /** Format: int64 */
            weeks_bitmask?: number | null;
            start_time?: number | null;
            duration?: number | null;
            room?: number | null;
        };
        /** @description Base serializer that automatically handles nested serialization with caching */
        TTEventType: {
            readonly id?: number;
            name: string;
        };
        /** @description Base serializer that automatically handles nested serialization with caching */
        TTEventTypeRequest: {
            name: string;
        };
        /** @description Base serializer that automatically handles nested serialization with caching */
        TTGroup: {
            readonly id?: number;
            name: string;
            description?: string | null;
            timetables: number[];
            owner: number;
        };
        TTGroupCounts: {
            /** @description Name of the tt group */
            name: string;
            /** @description Number of tt in this group */
            count: number;
        };
        /** @description Base serializer that automatically handles nested serialization with caching */
        TTGroupRequest: {
            name: string;
            description?: string | null;
            timetables: number[];
            owner: number;
        };
        /** @description Base serializer that automatically handles nested serialization with caching */
        TTRequest: {
            name: string;
            description?: string | null;
            owner: number;
            /**
             * @description * `PUBLISHED` - Published
             *     * `HIDDEN` - Hidden
             *     * `WIP` - Work In Progress
             * @enum {string}
             */
            status?: "PUBLISHED" | "HIDDEN" | "WIP";
        };
        TokenObtainPair: {
            readonly access?: string;
            readonly refresh?: string;
        };
        TokenObtainPairRequest: {
            username: string;
            password: string;
        };
        TokenRefresh: {
            readonly access?: string;
        };
        TokenRefreshRequest: {
            refresh: string;
        };
        /** @description Base serializer that automatically handles nested serialization with caching */
        User: {
            readonly id?: number;
            username: string;
            full_name?: string | null;
            /** Format: date-time */
            last_logout?: string | null;
        };
        /** @description Base serializer that automatically handles nested serialization with caching */
        UserRequest: {
            username: string;
            full_name?: string | null;
            /** Format: date-time */
            last_logout?: string | null;
        };
        schema: {
            readonly id?: number;
            human_name: string;
            /** Format: date */
            start_date?: string | null;
            readonly schema_name?: string;
            /** Format: date */
            end_date?: string | null;
            is_active?: boolean;
        };
        schemaRequest: {
            human_name: string;
            /** Format: date */
            start_date?: string | null;
            /** Format: date */
            end_date?: string | null;
            is_active?: boolean;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    allowence_list: {
        parameters: {
            query?: {
                amount?: number;
                /** @description Number of results to return per page. */
                limit?: number;
                /** @description Maximum nesting level for serialized objects.Use with causion of circular references */
                "max-level"?: number;
                /** @description The initial index from which to return the results. */
                offset?: number;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                tta?: number;
            };
            header: {
                /** @description Term provided in a header, e.g., 'term_WS_2024_2025' */
                "X-Term": string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedAllowanceList"];
                };
            };
        };
    };
    allowence_create: {
        parameters: {
            query?: never;
            header: {
                /** @description Term provided in a header, e.g., 'term_WS_2024_2025' */
                "X-Term": string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AllowanceRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["AllowanceRequest"];
                "multipart/form-data": components["schemas"]["AllowanceRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Allowance"];
                };
            };
        };
    };
    allowence_retrieve: {
        parameters: {
            query?: {
                /** @description Maximum nesting level for serialized objects.Use with causion of circular references */
                "max-level"?: number;
            };
            header: {
                /** @description Term provided in a header, e.g., 'term_WS_2024_2025' */
                "X-Term": string;
            };
            path: {
                /** @description A unique integer value identifying this allowance. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Allowance"];
                };
            };
        };
    };
    allowence_update: {
        parameters: {
            query?: never;
            header: {
                /** @description Term provided in a header, e.g., 'term_WS_2024_2025' */
                "X-Term": string;
            };
            path: {
                /** @description A unique integer value identifying this allowance. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AllowanceRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["AllowanceRequest"];
                "multipart/form-data": components["schemas"]["AllowanceRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Allowance"];
                };
            };
        };
    };
    allowence_destroy: {
        parameters: {
            query?: never;
            header: {
                /** @description Term provided in a header, e.g., 'term_WS_2024_2025' */
                "X-Term": string;
            };
            path: {
                /** @description A unique integer value identifying this allowance. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    allowence_partial_update: {
        parameters: {
            query?: never;
            header: {
                /** @description Term provided in a header, e.g., 'term_WS_2024_2025' */
                "X-Term": string;
            };
            path: {
                /** @description A unique integer value identifying this allowance. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedAllowanceRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedAllowanceRequest"];
                "multipart/form-data": components["schemas"]["PatchedAllowanceRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Allowance"];
                };
            };
        };
    };
    buildings_list: {
        parameters: {
            query?: {
                abbrev?: string;
                /** @description Number of results to return per page. */
                limit?: number;
                /** @description Maximum nesting level for serialized objects.Use with causion of circular references */
                "max-level"?: number;
                name?: string;
                /** @description The initial index from which to return the results. */
                offset?: number;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
            };
            header: {
                /** @description Term provided in a header, e.g., 'term_WS_2024_2025' */
                "X-Term": string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedBuildingList"];
                };
            };
        };
    };
    buildings_create: {
        parameters: {
            query?: never;
            header: {
                /** @description Term provided in a header, e.g., 'term_WS_2024_2025' */
                "X-Term": string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["BuildingRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["BuildingRequest"];
                "multipart/form-data": components["schemas"]["BuildingRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Building"];
                };
            };
        };
    };
    buildings_retrieve: {
        parameters: {
            query?: {
                /** @description Maximum nesting level for serialized objects.Use with causion of circular references */
                "max-level"?: number;
            };
            header: {
                /** @description Term provided in a header, e.g., 'term_WS_2024_2025' */
                "X-Term": string;
            };
            path: {
                /** @description A unique integer value identifying this building. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Building"];
                };
            };
        };
    };
    buildings_update: {
        parameters: {
            query?: never;
            header: {
                /** @description Term provided in a header, e.g., 'term_WS_2024_2025' */
                "X-Term": string;
            };
            path: {
                /** @description A unique integer value identifying this building. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["BuildingRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["BuildingRequest"];
                "multipart/form-data": components["schemas"]["BuildingRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Building"];
                };
            };
        };
    };
    buildings_destroy: {
        parameters: {
            query?: never;
            header: {
                /** @description Term provided in a header, e.g., 'term_WS_2024_2025' */
                "X-Term": string;
            };
            path: {
                /** @description A unique integer value identifying this building. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    buildings_partial_update: {
        parameters: {
            query?: never;
            header: {
                /** @description Term provided in a header, e.g., 'term_WS_2024_2025' */
                "X-Term": string;
            };
            path: {
                /** @description A unique integer value identifying this building. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedBuildingRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedBuildingRequest"];
                "multipart/form-data": components["schemas"]["PatchedBuildingRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Building"];
                };
            };
        };
    };
    equipment_list: {
        parameters: {
            query?: {
                id?: number;
                /** @description Multiple values may be separated by commas. */
                id__in?: number[];
                /** @description Number of results to return per page. */
                limit?: number;
                /** @description Maximum nesting level for serialized objects.Use with causion of circular references */
                "max-level"?: number;
                name?: string;
                name__icontains?: string;
                name__iregex?: string;
                /** @description The initial index from which to return the results. */
                offset?: number;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
            };
            header: {
                /** @description Term provided in a header, e.g., 'term_WS_2024_2025' */
                "X-Term": string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedEquipmentList"];
                };
            };
        };
    };
    equipment_create: {
        parameters: {
            query?: never;
            header: {
                /** @description Term provided in a header, e.g., 'term_WS_2024_2025' */
                "X-Term": string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EquipmentRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["EquipmentRequest"];
                "multipart/form-data": components["schemas"]["EquipmentRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Equipment"];
                };
            };
        };
    };
    equipment_retrieve: {
        parameters: {
            query?: {
                /** @description Maximum nesting level for serialized objects.Use with causion of circular references */
                "max-level"?: number;
            };
            header: {
                /** @description Term provided in a header, e.g., 'term_WS_2024_2025' */
                "X-Term": string;
            };
            path: {
                /** @description A unique integer value identifying this equipment. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Equipment"];
                };
            };
        };
    };
    equipment_update: {
        parameters: {
            query?: never;
            header: {
                /** @description Term provided in a header, e.g., 'term_WS_2024_2025' */
                "X-Term": string;
            };
            path: {
                /** @description A unique integer value identifying this equipment. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EquipmentRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["EquipmentRequest"];
                "multipart/form-data": components["schemas"]["EquipmentRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Equipment"];
                };
            };
        };
    };
    equipment_destroy: {
        parameters: {
            query?: never;
            header: {
                /** @description Term provided in a header, e.g., 'term_WS_2024_2025' */
                "X-Term": string;
            };
            path: {
                /** @description A unique integer value identifying this equipment. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    equipment_partial_update: {
        parameters: {
            query?: never;
            header: {
                /** @description Term provided in a header, e.g., 'term_WS_2024_2025' */
                "X-Term": string;
            };
            path: {
                /** @description A unique integer value identifying this equipment. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedEquipmentRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedEquipmentRequest"];
                "multipart/form-data": components["schemas"]["PatchedEquipmentRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Equipment"];
                };
            };
        };
    };
    import_lsData_retrieve: {
        parameters: {
            query: {
                /** @description Specifies the target directory path */
                path: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Directory contents */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description The specified path points to a file. */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description No such path or directory. */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    imports_exports_fei_import_db_create: {
        parameters: {
            query: {
                /** @description Timetable ID */
                id: number;
            };
            header: {
                /** @description Term provided in a header, e.g., 'term_WS_2024_2025' */
                "X-Term": string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Ok_serializerRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["Ok_serializerRequest"];
                "multipart/form-data": components["schemas"]["Ok_serializerRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Ok_serializer"];
                };
            };
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Err_serializer"];
                };
            };
        };
    };
    imports_exports_fei_import_dir_create: {
        parameters: {
            query: {
                /** @description Specifies the target directory path */
                path: string;
                /** @description Specifies the AIS term to import; if not specified, imports terms first, call GET get_terms */
                term?: number;
            };
            header: {
                /** @description Term provided in a header, e.g., 'term_WS_2024_2025' */
                "X-Term": string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Ok_serializerRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["Ok_serializerRequest"];
                "multipart/form-data": components["schemas"]["Ok_serializerRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Ok_serializer"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Err_serializer"];
                };
            };
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Err_serializer"];
                };
            };
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Err_serializer"];
                };
            };
        };
    };
    imports_exports_fei_import_zip_create: {
        parameters: {
            query?: never;
            header: {
                /** @description Term provided in a header, e.g., 'term_WS_2024_2025' */
                "X-Term": string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "multipart/form-data": {
                    /**
                     * Format: binary
                     * @description ZIP file containing CSV data
                     */
                    file: string;
                    /**
                     * @description Whether to persist the ZIP in the DATA directory
                     * @default false
                     */
                    persist?: boolean;
                    /**
                     * @description AIS term to import
                     * @example 2023
                     */
                    term?: number;
                };
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Ok_serializer"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Err_serializer"];
                };
            };
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Err_serializer"];
                };
            };
        };
    };
    imports_exports_fei_terms_list: {
        parameters: {
            query?: {
                department?: string;
                /** @description Multiple values may be separated by commas. */
                department__in?: string[];
                id?: number;
                /** @description Multiple values may be separated by commas. */
                id__in?: number[];
                /** @description Number of results to return per page. */
                limit?: number;
                next?: number;
                /** @description The initial index from which to return the results. */
                offset?: number;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                phd?: boolean;
                prev?: number;
                /** @description * `ZS` - Zimny
                 *     * `LS` - Letny */
                semester?: "LS" | "ZS";
                /** @description Multiple values may be separated by commas. */
                semester__in?: string[];
                /** @description Filter by exact year (e.g., 2023/2024) */
                year_start?: string;
                year_start__gte?: number;
                /** @description Multiple values may be separated by commas. */
                year_start__in?: number[];
                year_start__lte?: number;
                /** @description Filter by partial year (e.g., 2023) */
                year_start_contains?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedAISObdobieList"];
                };
            };
        };
    };
    imports_exports_fei_terms_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this AIS obdobie. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AISObdobie"];
                };
            };
        };
    };
    imports_exports_fei_terms_import_dir_create: {
        parameters: {
            query: {
                /** @description Directory path in DATA folder */
                path: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Ok_serializer"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Err_serializer"];
                };
            };
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Err_serializer"];
                };
            };
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Err_serializer"];
                };
            };
        };
    };
    imports_exports_fei_terms_import_zip_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "multipart/form-data": {
                    /** Format: binary */
                    file: string;
                    /** @default false */
                    persist?: boolean;
                };
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Ok_serializer"];
                };
            };
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Err_serializer"];
                };
            };
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Err_serializer"];
                };
            };
        };
    };
    room_equipment_list: {
        parameters: {
            query?: {
                count?: number;
                count__gte?: number;
                count__lte?: number;
                equipment?: number;
                /** @description Multiple values may be separated by commas. */
                equipment__in?: number[];
                equipment__name?: string;
                equipment__name__icontains?: string;
                equipment__name__iregex?: string;
                /** @description Number of results to return per page. */
                limit?: number;
                /** @description Maximum nesting level for serialized objects.Use with causion of circular references */
                "max-level"?: number;
                /** @description The initial index from which to return the results. */
                offset?: number;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                room?: number;
                room__building?: number;
                room__building__abbrev?: string;
                room__building__abbrev__icontains?: string;
                room__building__abbrev__iregex?: string;
                /** @description Multiple values may be separated by commas. */
                room__building__in?: number[];
                room__building__name?: string;
                room__building__name__icontains?: string;
                room__building__name__iregex?: string;
                /** @description Multiple values may be separated by commas. */
                room__in?: number[];
                room__name?: string;
                room__name__icontains?: string;
                room__name__iregex?: string;
            };
            header: {
                /** @description Term provided in a header, e.g., 'term_WS_2024_2025' */
                "X-Term": string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedRoomEquipmentList"];
                };
            };
        };
    };
    room_equipment_create: {
        parameters: {
            query?: never;
            header: {
                /** @description Term provided in a header, e.g., 'term_WS_2024_2025' */
                "X-Term": string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RoomEquipmentRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["RoomEquipmentRequest"];
                "multipart/form-data": components["schemas"]["RoomEquipmentRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RoomEquipment"];
                };
            };
        };
    };
    room_equipment_retrieve: {
        parameters: {
            query?: {
                /** @description Maximum nesting level for serialized objects.Use with causion of circular references */
                "max-level"?: number;
            };
            header: {
                /** @description Term provided in a header, e.g., 'term_WS_2024_2025' */
                "X-Term": string;
            };
            path: {
                /** @description A unique integer value identifying this room equipment. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RoomEquipment"];
                };
            };
        };
    };
    room_equipment_update: {
        parameters: {
            query?: never;
            header: {
                /** @description Term provided in a header, e.g., 'term_WS_2024_2025' */
                "X-Term": string;
            };
            path: {
                /** @description A unique integer value identifying this room equipment. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RoomEquipmentRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["RoomEquipmentRequest"];
                "multipart/form-data": components["schemas"]["RoomEquipmentRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RoomEquipment"];
                };
            };
        };
    };
    room_equipment_destroy: {
        parameters: {
            query?: never;
            header: {
                /** @description Term provided in a header, e.g., 'term_WS_2024_2025' */
                "X-Term": string;
            };
            path: {
                /** @description A unique integer value identifying this room equipment. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    room_equipment_partial_update: {
        parameters: {
            query?: never;
            header: {
                /** @description Term provided in a header, e.g., 'term_WS_2024_2025' */
                "X-Term": string;
            };
            path: {
                /** @description A unique integer value identifying this room equipment. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedRoomEquipmentRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedRoomEquipmentRequest"];
                "multipart/form-data": components["schemas"]["PatchedRoomEquipmentRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RoomEquipment"];
                };
            };
        };
    };
    room_groups_list: {
        parameters: {
            query?: {
                id?: number;
                /** @description Multiple values may be separated by commas. */
                id__in?: number[];
                /** @description Number of results to return per page. */
                limit?: number;
                /** @description Maximum nesting level for serialized objects.Use with causion of circular references */
                "max-level"?: number;
                name?: string;
                name__icontains?: string;
                name__iregex?: string;
                /** @description The initial index from which to return the results. */
                offset?: number;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                owner?: number;
                /** @description Multiple values may be separated by commas. */
                owner__in?: number[];
                owner__username?: string;
                owner__username__icontains?: string;
                owner__username__iregex?: string;
                room?: number;
                room__building?: number;
                room__building__abbrev?: string;
                room__building__abbrev__icontains?: string;
                room__building__abbrev__iregex?: string;
                /** @description Multiple values may be separated by commas. */
                room__building__in?: number[];
                room__building__name?: string;
                room__building__name__icontains?: string;
                room__building__name__iregex?: string;
                room__equipment?: number[];
                /** @description Multiple values may be separated by commas. */
                room__equipment__in?: number[];
                room__equipment__name?: string;
                room__equipment__name__icontains?: string;
                room__equipment__name__iregex?: string;
                /** @description Multiple values may be separated by commas. */
                room__in?: number[];
                room__name?: string;
                room__name__icontains?: string;
                room__name__iregex?: string;
            };
            header: {
                /** @description Term provided in a header, e.g., 'term_WS_2024_2025' */
                "X-Term": string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedRoomGroupList"];
                };
            };
        };
    };
    room_groups_create: {
        parameters: {
            query?: never;
            header: {
                /** @description Term provided in a header, e.g., 'term_WS_2024_2025' */
                "X-Term": string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RoomGroupRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["RoomGroupRequest"];
                "multipart/form-data": components["schemas"]["RoomGroupRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RoomGroup"];
                };
            };
        };
    };
    room_groups_retrieve: {
        parameters: {
            query?: {
                /** @description Maximum nesting level for serialized objects.Use with causion of circular references */
                "max-level"?: number;
            };
            header: {
                /** @description Term provided in a header, e.g., 'term_WS_2024_2025' */
                "X-Term": string;
            };
            path: {
                /** @description A unique integer value identifying this room group. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RoomGroup"];
                };
            };
        };
    };
    room_groups_update: {
        parameters: {
            query?: never;
            header: {
                /** @description Term provided in a header, e.g., 'term_WS_2024_2025' */
                "X-Term": string;
            };
            path: {
                /** @description A unique integer value identifying this room group. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RoomGroupRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["RoomGroupRequest"];
                "multipart/form-data": components["schemas"]["RoomGroupRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RoomGroup"];
                };
            };
        };
    };
    room_groups_destroy: {
        parameters: {
            query?: never;
            header: {
                /** @description Term provided in a header, e.g., 'term_WS_2024_2025' */
                "X-Term": string;
            };
            path: {
                /** @description A unique integer value identifying this room group. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    room_groups_partial_update: {
        parameters: {
            query?: never;
            header: {
                /** @description Term provided in a header, e.g., 'term_WS_2024_2025' */
                "X-Term": string;
            };
            path: {
                /** @description A unique integer value identifying this room group. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedRoomGroupRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedRoomGroupRequest"];
                "multipart/form-data": components["schemas"]["PatchedRoomGroupRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["RoomGroup"];
                };
            };
        };
    };
    room_groups_list_groups_list: {
        parameters: {
            query?: {
                /** @description Number of results to return per page. */
                limit?: number;
                /** @description The initial index from which to return the results. */
                offset?: number;
            };
            header: {
                /** @description Term provided in a header, e.g., 'term_WS_2024_2025' */
                "X-Term": string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedRoomGroupNameCountList"];
                };
            };
        };
    };
    rooms_list: {
        parameters: {
            query?: {
                building?: number;
                building__abbrev?: string;
                building__abbrev__icontains?: string;
                building__abbrev__iregex?: string;
                /** @description Multiple values may be separated by commas. */
                building__in?: number[];
                building__name?: string;
                building__name__icontains?: string;
                building__name__iregex?: string;
                capacity?: number;
                capacity__gte?: number;
                capacity__lte?: number;
                equipment?: number[];
                /** @description Multiple values may be separated by commas. */
                equipment__in?: number[];
                equipment__name?: string;
                equipment__name__icontains?: string;
                equipment__name__iregex?: string;
                id?: number;
                /** @description Multiple values may be separated by commas. */
                id__in?: number[];
                /** @description Number of results to return per page. */
                limit?: number;
                /** @description Maximum nesting level for serialized objects.Use with causion of circular references */
                "max-level"?: number;
                name?: string;
                name__icontains?: string;
                name__iregex?: string;
                /** @description The initial index from which to return the results. */
                offset?: number;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
            };
            header: {
                /** @description Term provided in a header, e.g., 'term_WS_2024_2025' */
                "X-Term": string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedRoomList"];
                };
            };
        };
    };
    rooms_create: {
        parameters: {
            query?: never;
            header: {
                /** @description Term provided in a header, e.g., 'term_WS_2024_2025' */
                "X-Term": string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RoomRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["RoomRequest"];
                "multipart/form-data": components["schemas"]["RoomRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Room"];
                };
            };
        };
    };
    rooms_retrieve: {
        parameters: {
            query?: {
                /** @description Maximum nesting level for serialized objects.Use with causion of circular references */
                "max-level"?: number;
            };
            header: {
                /** @description Term provided in a header, e.g., 'term_WS_2024_2025' */
                "X-Term": string;
            };
            path: {
                /** @description A unique integer value identifying this room. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Room"];
                };
            };
        };
    };
    rooms_update: {
        parameters: {
            query?: never;
            header: {
                /** @description Term provided in a header, e.g., 'term_WS_2024_2025' */
                "X-Term": string;
            };
            path: {
                /** @description A unique integer value identifying this room. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RoomRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["RoomRequest"];
                "multipart/form-data": components["schemas"]["RoomRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Room"];
                };
            };
        };
    };
    rooms_destroy: {
        parameters: {
            query?: never;
            header: {
                /** @description Term provided in a header, e.g., 'term_WS_2024_2025' */
                "X-Term": string;
            };
            path: {
                /** @description A unique integer value identifying this room. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    rooms_partial_update: {
        parameters: {
            query?: never;
            header: {
                /** @description Term provided in a header, e.g., 'term_WS_2024_2025' */
                "X-Term": string;
            };
            path: {
                /** @description A unique integer value identifying this room. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedRoomRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedRoomRequest"];
                "multipart/form-data": components["schemas"]["PatchedRoomRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Room"];
                };
            };
        };
    };
    schemas_list: {
        parameters: {
            query?: {
                /** @description Number of results to return per page. */
                limit?: number;
                /** @description The initial index from which to return the results. */
                offset?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedschemaList"];
                };
            };
        };
    };
    schemas_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["schemaRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["schemaRequest"];
                "multipart/form-data": components["schemas"]["schemaRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["schema"];
                };
            };
        };
    };
    schemas_retrieve: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this schema. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["schema"];
                };
            };
        };
    };
    schemas_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this schema. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["schemaRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["schemaRequest"];
                "multipart/form-data": components["schemas"]["schemaRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["schema"];
                };
            };
        };
    };
    schemas_destroy: {
        parameters: {
            query?: {
                /** @description If true, deactivates and deletes an active schema. If false, prevents deletion of active schemas. */
                force?: boolean;
            };
            header?: never;
            path: {
                /** @description A unique integer value identifying this schema. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    schemas_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this schema. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedschemaRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedschemaRequest"];
                "multipart/form-data": components["schemas"]["PatchedschemaRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["schema"];
                };
            };
        };
    };
    schemas_activate_create: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this schema. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["schema"];
                };
            };
        };
    };
    subject_groups_list: {
        parameters: {
            query?: {
                /** @description Number of results to return per page. */
                limit?: number;
                /** @description Maximum nesting level for serialized objects.Use with causion of circular references */
                "max-level"?: number;
                name?: string;
                /** @description The initial index from which to return the results. */
                offset?: number;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                subject?: number;
                subject__code?: string;
                subject__nominal_semester?: number;
            };
            header: {
                /** @description Term provided in a header, e.g., 'term_WS_2024_2025' */
                "X-Term": string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedSubjectGroupList"];
                };
            };
        };
    };
    subject_groups_create: {
        parameters: {
            query?: never;
            header: {
                /** @description Term provided in a header, e.g., 'term_WS_2024_2025' */
                "X-Term": string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SubjectGroupRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["SubjectGroupRequest"];
                "multipart/form-data": components["schemas"]["SubjectGroupRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SubjectGroup"];
                };
            };
        };
    };
    subject_groups_retrieve: {
        parameters: {
            query?: {
                /** @description Maximum nesting level for serialized objects.Use with causion of circular references */
                "max-level"?: number;
            };
            header: {
                /** @description Term provided in a header, e.g., 'term_WS_2024_2025' */
                "X-Term": string;
            };
            path: {
                /** @description A unique integer value identifying this subject group. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SubjectGroup"];
                };
            };
        };
    };
    subject_groups_update: {
        parameters: {
            query?: never;
            header: {
                /** @description Term provided in a header, e.g., 'term_WS_2024_2025' */
                "X-Term": string;
            };
            path: {
                /** @description A unique integer value identifying this subject group. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SubjectGroupRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["SubjectGroupRequest"];
                "multipart/form-data": components["schemas"]["SubjectGroupRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SubjectGroup"];
                };
            };
        };
    };
    subject_groups_destroy: {
        parameters: {
            query?: never;
            header: {
                /** @description Term provided in a header, e.g., 'term_WS_2024_2025' */
                "X-Term": string;
            };
            path: {
                /** @description A unique integer value identifying this subject group. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    subject_groups_partial_update: {
        parameters: {
            query?: never;
            header: {
                /** @description Term provided in a header, e.g., 'term_WS_2024_2025' */
                "X-Term": string;
            };
            path: {
                /** @description A unique integer value identifying this subject group. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedSubjectGroupRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedSubjectGroupRequest"];
                "multipart/form-data": components["schemas"]["PatchedSubjectGroupRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SubjectGroup"];
                };
            };
        };
    };
    subject_groups_groups_list: {
        parameters: {
            query?: {
                /** @description Filter groups with at least this many subjects */
                count_gte?: number;
                /** @description Number of results to return per page. */
                limit?: number;
                /** @description Filter group names by regex pattern (case insensitive) */
                name_regex?: string;
                /** @description The initial index from which to return the results. */
                offset?: number;
                /** @description Order by count (use - for descending) */
                order?: "-count" | "count";
            };
            header: {
                /** @description Term provided in a header, e.g., 'term_WS_2024_2025' */
                "X-Term": string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedSubjectGroupCountsList"];
                };
            };
        };
    };
    subject_user_collisions_list: {
        parameters: {
            query?: {
                /** @description Number of results to return per page. */
                limit?: number;
                /** @description The initial index from which to return the results. */
                offset?: number;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                subject_a?: number;
                subject_b?: number;
            };
            header: {
                /** @description Term provided in a header, e.g., 'term_WS_2024_2025' */
                "X-Term": string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedCrossSubjectCollisionList"];
                };
            };
        };
    };
    subject_user_roles_list: {
        parameters: {
            query?: {
                count__gte?: number;
                count__lte?: number;
                /** @description Number of results to return per page. */
                limit?: number;
                /** @description Maximum nesting level for serialized objects.Use with causion of circular references */
                "max-level"?: number;
                /** @description The initial index from which to return the results. */
                offset?: number;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                role?: string;
                role__name?: string;
                /** @description Multiple values may be separated by commas. */
                role_id__in?: number[];
                subject?: number;
                subject__name?: string;
                /** @description Multiple values may be separated by commas. */
                subject_id__in?: number[];
                user?: number;
                /** @description Multiple values may be separated by commas. */
                user__in?: number[];
            };
            header: {
                /** @description Term provided in a header, e.g., 'term_WS_2024_2025' */
                "X-Term": string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedSubjectUserRoleList"];
                };
            };
        };
    };
    subject_user_roles_create: {
        parameters: {
            query?: never;
            header: {
                /** @description Term provided in a header, e.g., 'term_WS_2024_2025' */
                "X-Term": string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SubjectUserRoleRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["SubjectUserRoleRequest"];
                "multipart/form-data": components["schemas"]["SubjectUserRoleRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SubjectUserRole"];
                };
            };
        };
    };
    subject_user_roles_retrieve: {
        parameters: {
            query?: {
                /** @description Maximum nesting level for serialized objects.Use with causion of circular references */
                "max-level"?: number;
            };
            header: {
                /** @description Term provided in a header, e.g., 'term_WS_2024_2025' */
                "X-Term": string;
            };
            path: {
                /** @description A unique integer value identifying this subject user role. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SubjectUserRole"];
                };
            };
        };
    };
    subject_user_roles_update: {
        parameters: {
            query?: never;
            header: {
                /** @description Term provided in a header, e.g., 'term_WS_2024_2025' */
                "X-Term": string;
            };
            path: {
                /** @description A unique integer value identifying this subject user role. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SubjectUserRoleRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["SubjectUserRoleRequest"];
                "multipart/form-data": components["schemas"]["SubjectUserRoleRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SubjectUserRole"];
                };
            };
        };
    };
    subject_user_roles_destroy: {
        parameters: {
            query?: never;
            header: {
                /** @description Term provided in a header, e.g., 'term_WS_2024_2025' */
                "X-Term": string;
            };
            path: {
                /** @description A unique integer value identifying this subject user role. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    subject_user_roles_partial_update: {
        parameters: {
            query?: never;
            header: {
                /** @description Term provided in a header, e.g., 'term_WS_2024_2025' */
                "X-Term": string;
            };
            path: {
                /** @description A unique integer value identifying this subject user role. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedSubjectUserRoleRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedSubjectUserRoleRequest"];
                "multipart/form-data": components["schemas"]["PatchedSubjectUserRoleRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SubjectUserRole"];
                };
            };
        };
    };
    subjects_list: {
        parameters: {
            query?: {
                code?: string;
                /** @description Number of results to return per page. */
                limit?: number;
                /** @description Maximum nesting level for serialized objects.Use with causion of circular references */
                "max-level"?: number;
                name?: string;
                nominal_semester?: number;
                /** @description The initial index from which to return the results. */
                offset?: number;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
            };
            header: {
                /** @description Term provided in a header, e.g., 'term_WS_2024_2025' */
                "X-Term": string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedSubjectList"];
                };
            };
        };
    };
    subjects_create: {
        parameters: {
            query?: never;
            header: {
                /** @description Term provided in a header, e.g., 'term_WS_2024_2025' */
                "X-Term": string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SubjectRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["SubjectRequest"];
                "multipart/form-data": components["schemas"]["SubjectRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Subject"];
                };
            };
        };
    };
    subjects_retrieve: {
        parameters: {
            query?: {
                /** @description Maximum nesting level for serialized objects.Use with causion of circular references */
                "max-level"?: number;
            };
            header: {
                /** @description Term provided in a header, e.g., 'term_WS_2024_2025' */
                "X-Term": string;
            };
            path: {
                /** @description A unique integer value identifying this subject. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Subject"];
                };
            };
        };
    };
    subjects_update: {
        parameters: {
            query?: never;
            header: {
                /** @description Term provided in a header, e.g., 'term_WS_2024_2025' */
                "X-Term": string;
            };
            path: {
                /** @description A unique integer value identifying this subject. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SubjectRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["SubjectRequest"];
                "multipart/form-data": components["schemas"]["SubjectRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Subject"];
                };
            };
        };
    };
    subjects_destroy: {
        parameters: {
            query?: never;
            header: {
                /** @description Term provided in a header, e.g., 'term_WS_2024_2025' */
                "X-Term": string;
            };
            path: {
                /** @description A unique integer value identifying this subject. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    subjects_partial_update: {
        parameters: {
            query?: never;
            header: {
                /** @description Term provided in a header, e.g., 'term_WS_2024_2025' */
                "X-Term": string;
            };
            path: {
                /** @description A unique integer value identifying this subject. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedSubjectRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedSubjectRequest"];
                "multipart/form-data": components["schemas"]["PatchedSubjectRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Subject"];
                };
            };
        };
    };
    subjects_get_student_count_retrieve: {
        parameters: {
            query?: {
                /** @description ID of the subject to filter by */
                subject_id?: number;
            };
            header: {
                /** @description Term provided in a header, e.g., 'term_WS_2024_2025' */
                "X-Term": string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of subjects with student counts. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        subject_id?: number;
                        student_count?: number;
                    }[];
                };
            };
        };
    };
    token_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TokenObtainPairRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["TokenObtainPairRequest"];
                "multipart/form-data": components["schemas"]["TokenObtainPairRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TokenObtainPair"];
                };
            };
        };
    };
    token_refresh_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TokenRefreshRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["TokenRefreshRequest"];
                "multipart/form-data": components["schemas"]["TokenRefreshRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TokenRefresh"];
                };
            };
        };
    };
    tt_list: {
        parameters: {
            query?: {
                /** @description Filter by creation date (format: YYYY-MM-DD) */
                created_at?: string;
                /** @description Regex-based search for TT by description text */
                description?: string;
                /** @description Number of results to return per page. */
                limit?: number;
                /** @description Maximum nesting level for serialized objects.Use with causion of circular references */
                "max-level"?: number;
                /** @description Case-insensitive search for timetable name */
                name?: string;
                /** @description The initial index from which to return the results. */
                offset?: number;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description Filter by status: draft (initial), published (visible), archived (historical)
                 *
                 *     * `PUBLISHED` - Published
                 *     * `HIDDEN` - Hidden
                 *     * `WIP` - Work In Progress */
                status?: "HIDDEN" | "PUBLISHED" | "WIP";
                /** @description Filter by last update date (format: YYYY-MM-DD) */
                updated_at?: string;
            };
            header: {
                /** @description Term provided in a header, e.g., 'term_WS_2024_2025' */
                "X-Term": string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedTTList"];
                };
            };
        };
    };
    tt_create: {
        parameters: {
            query?: never;
            header: {
                /** @description Term provided in a header, e.g., 'term_WS_2024_2025' */
                "X-Term": string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TTRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["TTRequest"];
                "multipart/form-data": components["schemas"]["TTRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TT"];
                };
            };
        };
    };
    tt_retrieve: {
        parameters: {
            query?: {
                /** @description Maximum nesting level for serialized objects.Use with causion of circular references */
                "max-level"?: number;
            };
            header: {
                /** @description Term provided in a header, e.g., 'term_WS_2024_2025' */
                "X-Term": string;
            };
            path: {
                /** @description A unique integer value identifying this tt. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TT"];
                };
            };
        };
    };
    tt_update: {
        parameters: {
            query?: never;
            header: {
                /** @description Term provided in a header, e.g., 'term_WS_2024_2025' */
                "X-Term": string;
            };
            path: {
                /** @description A unique integer value identifying this tt. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TTRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["TTRequest"];
                "multipart/form-data": components["schemas"]["TTRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TT"];
                };
            };
        };
    };
    tt_destroy: {
        parameters: {
            query?: never;
            header: {
                /** @description Term provided in a header, e.g., 'term_WS_2024_2025' */
                "X-Term": string;
            };
            path: {
                /** @description A unique integer value identifying this tt. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    tt_partial_update: {
        parameters: {
            query?: never;
            header: {
                /** @description Term provided in a header, e.g., 'term_WS_2024_2025' */
                "X-Term": string;
            };
            path: {
                /** @description A unique integer value identifying this tt. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedTTRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedTTRequest"];
                "multipart/form-data": components["schemas"]["PatchedTTRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TT"];
                };
            };
        };
    };
    ttecontroller_generate_tte_events_list: {
        parameters: {
            query: {
                /** @description Number of results to return per page. */
                limit?: number;
                /** @description The initial index from which to return the results. */
                offset?: number;
                /** @description Specifies the subjectgroup name */
                subjectgroup_name: string;
                /** @description Specifies subjects by nominal_semester */
                subjects__nominal_semester?: string;
                /** @description Specifies the tt by ID */
                tt_id: string;
            };
            header: {
                /** @description Term provided in a header, e.g., 'term_WS_2024_2025' */
                "X-Term": string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedTTEventList"];
                };
            };
        };
    };
    ttetype_list: {
        parameters: {
            query?: {
                /** @description Number of results to return per page. */
                limit?: number;
                /** @description Maximum nesting level for serialized objects.Use with causion of circular references */
                "max-level"?: number;
                /** @description Case-insensitive search for event type name */
                name?: string;
                /** @description The initial index from which to return the results. */
                offset?: number;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
            };
            header: {
                /** @description Term provided in a header, e.g., 'term_WS_2024_2025' */
                "X-Term": string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedTTEventTypeList"];
                };
            };
        };
    };
    ttetype_create: {
        parameters: {
            query?: never;
            header: {
                /** @description Term provided in a header, e.g., 'term_WS_2024_2025' */
                "X-Term": string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TTEventTypeRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["TTEventTypeRequest"];
                "multipart/form-data": components["schemas"]["TTEventTypeRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TTEventType"];
                };
            };
        };
    };
    ttetype_retrieve: {
        parameters: {
            query?: {
                /** @description Maximum nesting level for serialized objects.Use with causion of circular references */
                "max-level"?: number;
            };
            header: {
                /** @description Term provided in a header, e.g., 'term_WS_2024_2025' */
                "X-Term": string;
            };
            path: {
                /** @description A unique integer value identifying this tt event type. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TTEventType"];
                };
            };
        };
    };
    ttetype_update: {
        parameters: {
            query?: never;
            header: {
                /** @description Term provided in a header, e.g., 'term_WS_2024_2025' */
                "X-Term": string;
            };
            path: {
                /** @description A unique integer value identifying this tt event type. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TTEventTypeRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["TTEventTypeRequest"];
                "multipart/form-data": components["schemas"]["TTEventTypeRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TTEventType"];
                };
            };
        };
    };
    ttetype_destroy: {
        parameters: {
            query?: never;
            header: {
                /** @description Term provided in a header, e.g., 'term_WS_2024_2025' */
                "X-Term": string;
            };
            path: {
                /** @description A unique integer value identifying this tt event type. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ttetype_partial_update: {
        parameters: {
            query?: never;
            header: {
                /** @description Term provided in a header, e.g., 'term_WS_2024_2025' */
                "X-Term": string;
            };
            path: {
                /** @description A unique integer value identifying this tt event type. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedTTEventTypeRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedTTEventTypeRequest"];
                "multipart/form-data": components["schemas"]["PatchedTTEventTypeRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TTEventType"];
                };
            };
        };
    };
    ttevent_list: {
        parameters: {
            query?: {
                /** @description Day of week (0=Monday, 1=Tuesday, ..., 6=Sunday) */
                day_of_week?: number;
                /** @description Event duration in number of time slots */
                duration?: number;
                /** @description Filter by event type ID (lecture, lab, etc.) */
                event_type?: number;
                /** @description Number of results to return per page. */
                limit?: number;
                /** @description Maximum nesting level for serialized objects.Use with causion of circular references */
                "max-level"?: number;
                /** @description The initial index from which to return the results. */
                offset?: number;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description Filter by room ID */
                room?: number;
                /** @description Time slot (e.g., 0=07:00, 1=8:30, 2=10:00) */
                start_time?: number;
                /** @description Filter by subject ID */
                subject?: number;
                /** @description Regex search for subject code (e.g., API, AZA) */
                subject__code?: string;
                /** @description Filter by timetable ID */
                tt?: number;
                /** @description Binary mask for weeks (e.g., 15=first 4 weeks, 255=first 8 weeks) */
                weeks_bitmask?: number;
            };
            header: {
                /** @description Term provided in a header, e.g., 'term_WS_2024_2025' */
                "X-Term": string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedTTEventList"];
                };
            };
        };
    };
    ttevent_create: {
        parameters: {
            query?: never;
            header: {
                /** @description Term provided in a header, e.g., 'term_WS_2024_2025' */
                "X-Term": string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TTEventRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["TTEventRequest"];
                "multipart/form-data": components["schemas"]["TTEventRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TTEvent"];
                };
            };
        };
    };
    ttevent_retrieve: {
        parameters: {
            query?: {
                /** @description Maximum nesting level for serialized objects.Use with causion of circular references */
                "max-level"?: number;
            };
            header: {
                /** @description Term provided in a header, e.g., 'term_WS_2024_2025' */
                "X-Term": string;
            };
            path: {
                /** @description A unique integer value identifying this tt event. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TTEvent"];
                };
            };
        };
    };
    ttevent_update: {
        parameters: {
            query?: never;
            header: {
                /** @description Term provided in a header, e.g., 'term_WS_2024_2025' */
                "X-Term": string;
            };
            path: {
                /** @description A unique integer value identifying this tt event. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TTEventRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["TTEventRequest"];
                "multipart/form-data": components["schemas"]["TTEventRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TTEvent"];
                };
            };
        };
    };
    ttevent_destroy: {
        parameters: {
            query?: never;
            header: {
                /** @description Term provided in a header, e.g., 'term_WS_2024_2025' */
                "X-Term": string;
            };
            path: {
                /** @description A unique integer value identifying this tt event. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ttevent_partial_update: {
        parameters: {
            query?: never;
            header: {
                /** @description Term provided in a header, e.g., 'term_WS_2024_2025' */
                "X-Term": string;
            };
            path: {
                /** @description A unique integer value identifying this tt event. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedTTEventRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedTTEventRequest"];
                "multipart/form-data": components["schemas"]["PatchedTTEventRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TTEvent"];
                };
            };
        };
    };
    ttgroup_list: {
        parameters: {
            query?: {
                /** @description Number of results to return per page. */
                limit?: number;
                /** @description Maximum nesting level for serialized objects.Use with causion of circular references */
                "max-level"?: number;
                /** @description Case-insensitive search for group name */
                name?: string;
                /** @description The initial index from which to return the results. */
                offset?: number;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                /** @description Filter by timetable ID */
                timetables?: number;
            };
            header: {
                /** @description Term provided in a header, e.g., 'term_WS_2024_2025' */
                "X-Term": string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedTTGroupList"];
                };
            };
        };
    };
    ttgroup_create: {
        parameters: {
            query?: never;
            header: {
                /** @description Term provided in a header, e.g., 'term_WS_2024_2025' */
                "X-Term": string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TTGroupRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["TTGroupRequest"];
                "multipart/form-data": components["schemas"]["TTGroupRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TTGroup"];
                };
            };
        };
    };
    ttgroup_retrieve: {
        parameters: {
            query?: {
                /** @description Maximum nesting level for serialized objects.Use with causion of circular references */
                "max-level"?: number;
            };
            header: {
                /** @description Term provided in a header, e.g., 'term_WS_2024_2025' */
                "X-Term": string;
            };
            path: {
                /** @description A unique integer value identifying this tt group. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TTGroup"];
                };
            };
        };
    };
    ttgroup_update: {
        parameters: {
            query?: never;
            header: {
                /** @description Term provided in a header, e.g., 'term_WS_2024_2025' */
                "X-Term": string;
            };
            path: {
                /** @description A unique integer value identifying this tt group. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TTGroupRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["TTGroupRequest"];
                "multipart/form-data": components["schemas"]["TTGroupRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TTGroup"];
                };
            };
        };
    };
    ttgroup_destroy: {
        parameters: {
            query?: never;
            header: {
                /** @description Term provided in a header, e.g., 'term_WS_2024_2025' */
                "X-Term": string;
            };
            path: {
                /** @description A unique integer value identifying this tt group. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ttgroup_partial_update: {
        parameters: {
            query?: never;
            header: {
                /** @description Term provided in a header, e.g., 'term_WS_2024_2025' */
                "X-Term": string;
            };
            path: {
                /** @description A unique integer value identifying this tt group. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedTTGroupRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedTTGroupRequest"];
                "multipart/form-data": components["schemas"]["PatchedTTGroupRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TTGroup"];
                };
            };
        };
    };
    ttgroup_groups_list: {
        parameters: {
            query?: {
                /** @description Filter groups with at least this many subjects */
                count_gte?: number;
                /** @description Number of results to return per page. */
                limit?: number;
                /** @description Filter group names by regex pattern (case insensitive) */
                name_regex?: string;
                /** @description The initial index from which to return the results. */
                offset?: number;
                /** @description Order by count (use - for descending) */
                order?: "-count" | "count";
            };
            header: {
                /** @description Term provided in a header, e.g., 'term_WS_2024_2025' */
                "X-Term": string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedTTGroupCountsList"];
                };
            };
        };
    };
    users_list: {
        parameters: {
            query?: {
                full_name?: string;
                /** @description Number of results to return per page. */
                limit?: number;
                /** @description Maximum nesting level for serialized objects.Use with causion of circular references */
                "max-level"?: number;
                /** @description The initial index from which to return the results. */
                offset?: number;
                /** @description Which field to use when ordering the results. */
                ordering?: string;
                username?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedUserList"];
                };
            };
        };
    };
    users_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["UserRequest"];
                "multipart/form-data": components["schemas"]["UserRequest"];
            };
        };
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["User"];
                };
            };
        };
    };
    users_retrieve: {
        parameters: {
            query?: {
                /** @description Maximum nesting level for serialized objects.Use with causion of circular references */
                "max-level"?: number;
            };
            header?: never;
            path: {
                /** @description A unique integer value identifying this user. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["User"];
                };
            };
        };
    };
    users_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this user. */
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UserRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["UserRequest"];
                "multipart/form-data": components["schemas"]["UserRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["User"];
                };
            };
        };
    };
    users_destroy: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this user. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No response body */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    users_partial_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description A unique integer value identifying this user. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["PatchedUserRequest"];
                "application/x-www-form-urlencoded": components["schemas"]["PatchedUserRequest"];
                "multipart/form-data": components["schemas"]["PatchedUserRequest"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["User"];
                };
            };
        };
    };
}
